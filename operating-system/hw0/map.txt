_main  @ 0x4005c2
recur @ 0x40057d
_main stack: 0x7ffdc8e8a99c
static data: 0x601048
Heap: malloc 1: 0x1dbc010
Heap: malloc 2: 0x1dbc080
recur call 3: stack@ 0x7ffdc8e8a96c
recur call 2: stack@ 0x7ffdc8e8a93c
recur call 1: stack@ 0x7ffdc8e8a90c
recur call 0: stack@ 0x7ffdc8e8a8dc

Address					 Segment
00000000004005c2 g     F .text	00000000000000ba              main
000000000040057d g     F .text	0000000000000045              recur
0000000000601048 g     O .data	0000000000000004              stuff

//TODO: TOZIH
.text: keeps the instruction.

.data: holds initialized data that contribute to the program's memory image.

.hash: holds a symbol hash table.

.interp: holds the path name of a program interpreter.

.bss: This section holds uninitialized data that contribute to the program's
memory image. By definition, the system initializes the data with zeros when
the program begins to run.

.dynamic: holds dynamic linking information.

.rodata: holds read-only data that typically contribute to a non-writable
segment in the process image.

.comment: holds version control information.

.init: holds executable instructions that contribute to the process
initialization code. When a program starts to run, the system arranges to
execute the code in this section before calling the main program entry
point (called main for C programs)

.fini: holds executable instructions that contribute to the process termination
code. That is, when a program exits normally, the system arranges to execute
the code in this section.



Grows from top to bottom. Because the stack pointer values decrease as stack grows.

48 bytes. Difference between two sequential function calls.
In x64 architecture it means 6 words.

No.
There are 6 bytes free space between two heap spaces. (Due to fragmentation)

